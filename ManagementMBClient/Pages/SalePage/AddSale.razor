@page "/sale/add"
@inject HttpClient _http
@using ManagementMBClient.DTOs
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager _navigationManager

<PageTitle>Add Sale</PageTitle>

<h1>Add Sale</h1>

@if (Products == null)
{
    <p><em>Loading Products...</em></p>
}
else if (Products.Count == 0)
{
    <p>No products available.</p>
}
else
{
    <EditForm Model="@newSale" OnValidSubmit="@AddSales">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="productId">Product:</label>
            <select class="form-control" id="productId" @bind="selectedProductId">
                <option value="">Select a Product</option>
                @foreach (var product in Products)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="price">Price:</label>
            <input type="number" class="form-control" id="price" @bind="@newSale.Price" required />
        </div>

        <div class="form-group">
            <label for="quantity">Quantity Sold:</label>
            <input type="number" class="form-control" id="quantity" @bind="@newSale.Quantity" required />
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <textarea class="form-control" id="description" @bind="@newSale.Description"></textarea>
        </div>

        <button type="submit" class="btn btn-primary">Add Sale</button>
    </EditForm>
}

@code {
    private SaleProductDTO newSale = new SaleProductDTO();
    private List<Product> Products;
    private Guid selectedProductId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Products = await _http.GetFromJsonAsync<List<Product>>("api/Products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }

    private async Task AddSales()
    {
        if (selectedProductId == Guid.Empty)
        {
            Console.WriteLine("No product selected.");
            return;
        }

        newSale.ProductId = selectedProductId;
        var response = await _http.PostAsJsonAsync("api/Sales", newSale);

        if (response.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo("/sale");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error creating sale: {errorMessage}");
        }
    }
}
