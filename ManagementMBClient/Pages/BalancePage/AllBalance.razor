@page "/balance"
@using ManagementMBClient.DTOs
@inject BalanceService BalanceService

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <h3 class="text-center">Balances</h3>
        </div>
    </div>

    <BalanceByDateComponent />

    <div class="row mt-3">
        <div class="col-md-12">
            <button class="btn btn-danger mb-3" @onclick="DeleteSelectedBalances" disabled="@(selectedBalances.Count == 0)">Delete Selected</button>
        </div>
    </div>
</div>
    @if (balances == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="table table-striped table-bordered mt-3">
            <thead class="thead-dark">
                <tr>
                    <th>
                        <input type="checkbox" @onclick="ToggleSelectAll" />
                    </th>
                    <th>Id</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var balance in balances)
                {
                    <tr>
                        <td> @balance.CurrentAssets</td>
                        <td> @balance.Availability</td>
                        <td> @balance.Debtors</td>
                        <td> @balance.StockProducts</td>
                        <td>@balance.FixedAssets</td>
                        <td> @balance.Transport</td>
                        <td>@balance.Equipment</td>
                        <td> @balance.Building</td>
                        <td> @balance.Liabilitiies</td>
                        <td>@balance.Capital</td>
                        <td>@balance.Date.ToString("yyyy-MM-dd")</td>
                       <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteBalance(balance.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }


@code {
    private IEnumerable<BalanceDto> balances;
    private HashSet<Guid> selectedBalances = new HashSet<Guid>();

    protected override async Task OnInitializedAsync()
    {
        balances = await BalanceService.GetAllBalancesAsync();
    }

    private async Task DeleteBalance(Guid id)
    {
        if (await BalanceService.DeleteBalanceAsync(id))
        {
            balances = await BalanceService.GetAllBalancesAsync();
            selectedBalances.Remove(id);
        }
    }

    private async Task DeleteSelectedBalances()
    {
        if (selectedBalances.Count > 0)
        {
            if (await BalanceService.DeleteBalancesAsync(selectedBalances))
            {
                balances = await BalanceService.GetAllBalancesAsync();
                selectedBalances.Clear();
            }
        }
    }

    private void ToggleSelection(Guid id)
    {
        if (selectedBalances.Contains(id))
        {
            selectedBalances.Remove(id);
        }
        else
        {
            selectedBalances.Add(id);
        }
    }

    private void ToggleSelectAll()
    {
        if (selectedBalances.Count == balances.Count())
        {
            selectedBalances.Clear();
        }
        else
        {
            selectedBalances = new HashSet<Guid>(balances.Select(b => b.Id));
        }
    }
}
